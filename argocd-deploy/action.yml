name: Deploy
description: "ArgoCD based deploy action. Requires kustomize to run."

inputs:
  environment:
    required: true
    description: "Environment to deploy to, e.g. staging, production."
  version:
    required: true
    description: "Container image tag being deployed, e.g. a commit SHA."
  deploying_repo:
    required: true
    description: "Repository which is running the pipeline to deploy from."
  infra_repo:
    required: true
    description: "Repository for ArgoCD to pick up changes from."
  deploy_key:
    required: true
    description: "Private key, with its public counterpart expected to be attached to `infra_repo` as deploy key."
  app:
    required: true
    description: "ArgoCD application to be deployed."
  argocd_pipeline_password:
    required: true
    description: "Password for the `pipeline` user in ArgoCD (read-only permissions for such user are sufficient)."
  argocd_server:
    required: true
    description: "Host name of the server where ArgoCD runs, e.g. argocd.example.com"

runs:
  using: "composite"
  steps:
    - name: Checkout infra repository
      uses: actions/checkout@v3
      with:
        repository: digitalservicebund/${{ inputs.infra_repo }}
        ssh-key: ${{ inputs.deploy_key }}
    - name: Update image tag for ${{ inputs.environment }}
      shell: bash
      run: |
        set -ex
        cd manifests/overlays/${{ inputs.environment }}
        kustomize edit set image ghcr.io/digitalservicebund/${{ inputs.deploying_repo }}:${{ inputs.version }}
    - name: Commit and push changes for infra repository
      shell: bash
      run: |
        set -ex
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
        git add manifests/overlays/${{ inputs.environment }}/kustomization.yaml
        git diff-index --cached --quiet HEAD ||
          git commit -m "Bump ${{ inputs.environment }} image to ${{ inputs.version }}" -m "[skip ci]" &&
          git push origin main
    - name: Trigger Argo CD sync
      shell: bash
      run: |
        set -ex
        curl -sSL -o argocd https://${ARGOCD_SERVER}/download/argocd-linux-amd64
        chmod +x argocd
        ./argocd login ${ARGOCD_SERVER} --username pipeline --password ${{ inputs.argocd_pipeline_password }} --grpc-web
        ./argocd app get --refresh ${{ inputs.app }} --grpc-web > /dev/null
      env:
        ARGOCD_SERVER: ${{ inputs.argocd_server }}
